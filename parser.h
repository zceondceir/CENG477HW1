#ifndef __HW1__PARSER__
#define __HW1__PARSER__

#include <string>
#include <vector>

#include <limits>
#include <math.h>


#define INF std::numeric_limits<float>::max()

#define EPS 1e-8f;

namespace parser
{
    //Notice that all the structures are as simple as possible
    //so that you are not enforced to adopt any style or design.
    
    class Vec3f                
    {
    public:
        
        float x, y, z;

        Vec3f() : x(0) , y(0) , z(0) {}

        Vec3f(float xx, float yy , float zz) { x = xx; y = yy ; z = zz;}


        Vec3f operator+(const Vec3f& v) const { return Vec3f(x + v.x, y + v.y, z + v.z); }
        Vec3f operator-(const Vec3f& v) const { return Vec3f(x - v.x, y - v.y, z - v.z); }

        Vec3f operator*(float s) const { return Vec3f(x * s, y * s, z * s); }
        Vec3f operator/(float s) const { return Vec3f(x / s, y / s, z / s); }

        
        float operator*(const Vec3f& v) const { return x * v.x + y * v.y + z * v.z; }

        Vec3f operator^(const Vec3f& v) const {
            return Vec3f(
                y * v.z - z * v.y,
                z * v.x - x * v.z,
                x * v.y - y * v.x
            );
        }

        float len (){
            return std::sqrt(x*x + y*y + z*z);
        }


        Vec3f normalized() const {
            float len = std::sqrt(x*x + y*y + z*z);
            if (len == 0.0f)  // sıfır vektör kontrolü
                return Vec3f(0, 0, 0);
            return Vec3f(x / len, y / len, z / len);
        }


    };


    struct Vec3i
    {
        int x, y, z;
    };

    struct Vec4f
    {
        float x, y, z, w;
    };

    struct Camera
    {
        Vec3f position;
        Vec3f gaze;
        Vec3f up;
        Vec4f near_plane;
        float near_distance;
        int image_width, image_height;
        std::string image_name;
    };

    struct PointLight
    {
        Vec3f position;
        Vec3f intensity;
    };

    struct Material
    {
        bool is_mirror;
        Vec3f ambient;
        Vec3f diffuse;
        Vec3f specular;
        Vec3f mirror;
        float phong_exponent;
    };

    struct Face
    {
        int v0_id;
        int v1_id;
        int v2_id;
    };

    struct Mesh
    {
        int material_id;
        std::vector<Face> faces;
    };

    struct Triangle
    {
        int material_id;
        Face indices;
    };

    struct Sphere
    {
        int material_id;
        int center_vertex_id;
        float radius;
    };

    struct Cylinder {
        int   material_id;
        int   center_vertex_id;
        Vec3f axis;
        float radius;
        float height;
    };

    struct Plane {
        int   material_id;
        int   center_vertex_id;
        Vec3f normal;
    };

    struct Scene
    {
        //Data
        Vec3i background_color;
        float shadow_ray_epsilon;
        int max_recursion_depth;
        std::vector<Camera> cameras;
        Vec3f ambient_light;
        std::vector<PointLight> point_lights;
        std::vector<Material> materials;
        std::vector<Vec3f> vertex_data;
        std::vector<Mesh> meshes;
        std::vector<Triangle> triangles;
        std::vector<Sphere> spheres;
        std::vector<Cylinder> cylinders;
        std::vector<Plane> planes;

        //Functions
        void loadFromXml(const std::string &filepath);
    };


/*
    
:::::::::::::::::::::::::::::::::::::=*#######################*+=:::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::=*################################*+-::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::+########################################+-:::::::::::::::::::::::::::
:::::::::::::::::::::::::::-*########****************************########*=:::::::::::::::::::::::::
:::::::::::::::::::::::::-####***************###########********************-:::::::::::::::::::::::
::::::::::::::::::::::::***********##############%################************-:::::::::::::::::::::
::::::::::::::::::::::=********##################%%####################********=::::::::::::::::::::
:::::::::::::::::::::+*****#####################=+#%#######################*****+::::::::::::::::::-
-::::::::::::::::::-****#######################=-==###########################****-:::::::::::::::::
::-:::::::::::::::-***########################=:::-=#############################**:::::::::::::::-=
--::-::::::::::::-**########################*=:::::-+%#############%###############+::::::::::::-===
=--::-::::::::::-*############%#####%**####*=:::::::-+#####*#######%%###############=::::::::::-====
:-=--::-::::::::*############%%####%*=####*+:::::::::-+####*=######%%%##############*::::::::-====--
::::---::-:::::+############%%%###%*==####==::::::::::-+###+=+######%%###############=:::::-====----
::::--=--:::::-#######%####%%%%##%*===###++::::::::::::-###+:-=####%%%%##############+:::--===------
:::::::---::::+###########%%##%#%*:-==##*:-:::::::::::::=##+:::+####%%%%#############*-:------------
:::::::::--::-*##########%%#=*%%#-:-==##-:=::::::::::::::+#+::::*##*=#%%#############*------:----:::
--:::::::::--=#######%##%%%==*%%=:::==**::-::::::::::::::-#+:::::*#=-=#%%#############=---:::::::::-
::-::::::::::*#######%##%#===*%+:-=+*++-:-::::::::::::::::-***#*+*#-:-=#%#############+-:::::::::---
::-::::::::::########%#%%+===*%#+=-====++::::::::::::::::-*=-====+%#=:-=##############*::::::::----:
::-:::::::::-%#######%%%#===+%+--*%###%*:::::::::::::::::::=%%#%%%*-*#--+##############::::::---::::
::-:::::::::=%#######%%##==*#--+%#######+::::::::::::::::.=%######%#-=#--+#############-:::--:::::::
-:-:::::::::+%#######%%#*=+#-::%##%%%%###:::::::::::::::::%##%%%%##%#:=%--+############=-:::::::::::
-:-:::::::::*%#######%##*=%+:.*%##%%%%##%-:::::::::::::::-%##%%%%###%-:#+:=############+::::::::::::
-:-:::::::::*%%#########+=%=..%###%%%%##%+:::::::::::::::-%##%%%%%##%=.+*:-%%##########+::::::::::::
-:-:::::::::#%%#########++%-..%%##%%%%##%=:::::::::::::::-%##%%%%###%=.**::%%##########+::::::::::::
-:-:::::::::#%%#########++%=..+%*=-*%%##%-::::::::::::::::%#=-*%%##%%-.#=::#%##########+::::::::::::
-:-:::::::::#%%#########+=+=..:%:...*###%:::::::::::::::::#-..:####%*.:+:::#%##########+::::::::::::
-:-:::::::::#%%#########+===:..+*::+###%*::::::::::::::::::%+=*###%#:.:::::#%##########+::::::::::::
-:-:::::::::#%%#########+===:::.-#%###%+:::::::::::::::::::-%%##%%+::::::::#%##########=::::::::::::
-:-:::::::::#%%#########+===::::::=++=--::::::::::::::::::::=+*+==:::::::::#%##########=::::::::::::
-:-:::::::::#%%#########+===:::::::::::::::::::::::::::::::::::::::::::::::#%##########=::::::::::::
-:-:::::::::%%%#########+===::::::::::::::::::::=+::::::::::::::::::::::::=%%##########=::::::::::::
-:-:::::::::%%%#########+===:::::::::::::::::::--:::::::::::::::::::::::::+%%%#########=::::::::::::
-:-:::::::::%%%##########===-:::::::::::::::::::::::::::::::::::::::::::::#%%%#########=::::::::::::
-:-:::::::::%%%%########%+===::::::::::::::::::::::::::::::::::::::::::::*%%%%#########=::::::::::::
-:-:::::::::%%%%########%#====:::::::::::::::-----------::::::::::::::::=%%%%%#########=::::::::::::
-:-:::::::::#%%%########%%#====::::::::::::::#++++++++++:::::::::::::::-#%%%%%#########+::::::::::::
::-:::::::::#%%%########%%%#+===-::::::::::::*=-------==::::::::::::::=%%%%%%%#########+::::::::--::
::-:::::::::#%%%########%%%%%#*===-::::::::::-=-------=-::::::::::::+#%%%%%%%%#########+::-:::::--::
::-:::::::::#%%%########%%%%%%%%#*===-::::::::-=======:::::::::::=*%%%%%%%%%%%#########*::-:::::--::
::-:::::::::#%%%########%%%%%%%%%%%%*+=-:::::::::::::::::::::-=#%%%%%%%%%%%%%%#########*::-:::::--::
::-:::::::::#%%%#########%%%%%%%%%%%%%%#+=-:::::::::::::::-=#%%%%%%%%%%%%%%%%%#########*---::::---::
::-:::::::::*%%%%########%%%%#%%%%%%%%%%%*=++=-:::::::-=====%%%%%%%%%%%%%%%%%%######%##*-------=-=-:
::::::::::::*%%%%########%%%%#%%%%%%%%%%%#=======+==========#%%%%%%%%#%%%%%%%%######%##*---------=--
:-::::::::::+%%%%########%%%%+%%%%%%%%%+=+==================-:*%%%%%%*%%%%%%%%#####%%##*----------::
:-::::::::::+%%%%########%%%%=%%%%%%%#===*===================..*%%%%#*%%%%%%%%#####%%%#*------------
::::::::::::+%%%%%#######%%%%++%%%%%*=-==+==================+:..-*%%**%%%%%%%######%%%##------------
::::::::::::+%%%%%#######%%%%*:#%#+=---=+=================-::-.....--#%%%%%%%######%%%##------------
::::::::::::=%%%%%#######%%%%#-==------=+================::::-........:=#%%%%######%%%#*------------
::::::::::::=%%%%%%#######%#=-----------+==============-::::::...........-%%%#####%%%%#*------------
::::::::::::-%%%%%%######*--------------==============-:::::=............=%%%#####%%%%#+------------
:::::::::::::%%%%%%%#####*--------------=++====+======-:---:=............*%%%####%%%%##=------------
:::::::::::::#%*#%%%%####*---------------+=============-:::-............:#%%%####%%%%#+-------------
:::::::::::::+%**%%%%#####---------------============-:::::-............-%%%####%%%#%#--------------
:::::::::::::-%#:#%%%%####+---------------+========::::::::-............=%%%###%%%=#%+--------------
:::::::::::::-*%--#%%%%###*---------------++++++++--------+.............*%%%##%%%++%=..-------------
:::::::::::=+-:%+.-%%%%%###=--------------=****==========+:............:#%%%#%%%=:#-....:=----------
::::::::::-.-+++%:.-#%%%%##+-------:.....:-+***===========.............+%%%%%%%=:+:...:=++=----:----
::::::::::==-:-+**:.:*%%%%%#---::..........:**+=========+:............:#%%%%%#-....:-++=:-+-::::::::
::::::::::=====:-**=:.+%%%%%*...............=*+=========:.............=%%%%%*:...:=+=-:=====::::::::
:::::::::+=======:-+++-:#%%%%-..............:*==========.............:#%%%%=..:=++--========-:::::::
::::::::-==========-:-++==#%%#::--=:.........=========+:.......-::..:#%%%*::=++--===========*-::::::
::::::::=+============::=++*#%#=--+:.........:========-........++=++*%%*==+=--================::::::
::::::::+=+=============-::::-*#=-+:..........========:.......:+-=-*#*++=--================+=+-:::::
::-::::=+==+==============+====-:+=:...........+======........:+:==+==:-+=================+===+:::::
    
*/

    


    class Ray {
    public:
        Vec3f origin;
        Vec3f direction;
        int depth;

        Ray() : origin(Vec3f()), direction(Vec3f()), depth(0) {}
        Ray(const Vec3f& o, const Vec3f& d, int dept) : origin(o), direction(d), depth(dept) {}

        inline Vec3f at(float t) const { return origin + direction * t; }
 
        

    };

    class HitRecord {
    public:
        float t;             // distance
        Vec3f point;      
        Vec3f normal;     // for shading
        bool hit;            // 
        int Mid;

        HitRecord()
            : t(INF),
            point(Vec3f()),
            normal(Vec3f()),
            hit(false),
            Mid(-1)
        {}
    };


    



}



#endif
